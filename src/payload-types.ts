/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  collections: {
    tenants: Tenant;
    users: User;
    shops: Shop;
    'payment-methods': PaymentMethod;
    'fulfillment-methods': FulfillmentMethod;
    timeslots: Timeslot;
    'shop-branding': ShopBranding;
    'reservation-entries': ReservationEntry;
    'reservation-settings': ReservationSetting;
    tables: Table;
    printers: Printer;
    pages: Page;
    media: Media;
    customers: Customer;
    'customer-credits': CustomerCredit;
    'customer-loyalty': CustomerLoyalty;
    coupons: Coupon;
    'gift-vouchers': GiftVoucher;
    orders: Order;
    categories: Category;
    products: Product;
    subproducts: Subproduct;
    productpopups: Productpopup;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    tenants: TenantsSelect<false> | TenantsSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    shops: ShopsSelect<false> | ShopsSelect<true>;
    'payment-methods': PaymentMethodsSelect<false> | PaymentMethodsSelect<true>;
    'fulfillment-methods': FulfillmentMethodsSelect<false> | FulfillmentMethodsSelect<true>;
    timeslots: TimeslotsSelect<false> | TimeslotsSelect<true>;
    'shop-branding': ShopBrandingSelect<false> | ShopBrandingSelect<true>;
    'reservation-entries': ReservationEntriesSelect<false> | ReservationEntriesSelect<true>;
    'reservation-settings': ReservationSettingsSelect<false> | ReservationSettingsSelect<true>;
    tables: TablesSelect<false> | TablesSelect<true>;
    printers: PrintersSelect<false> | PrintersSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    customers: CustomersSelect<false> | CustomersSelect<true>;
    'customer-credits': CustomerCreditsSelect<false> | CustomerCreditsSelect<true>;
    'customer-loyalty': CustomerLoyaltySelect<false> | CustomerLoyaltySelect<true>;
    coupons: CouponsSelect<false> | CouponsSelect<true>;
    'gift-vouchers': GiftVouchersSelect<false> | GiftVouchersSelect<true>;
    orders: OrdersSelect<false> | OrdersSelect<true>;
    categories: CategoriesSelect<false> | CategoriesSelect<true>;
    products: ProductsSelect<false> | ProductsSelect<true>;
    subproducts: SubproductsSelect<false> | SubproductsSelect<true>;
    productpopups: ProductpopupsSelect<false> | ProductpopupsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: 'nl' | 'en' | 'de' | 'fr';
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tenants".
 */
export interface Tenant {
  id: string;
  name: string;
  domains?:
    | {
        domain: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Used for URL paths, example: /tenant-slug/page-slug.
   */
  slug: string;
  /**
   * If checked, logging in is not required.
   */
  public?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  /**
   * Assign roles to the user.
   */
  roles?: ('super-admin' | 'user')[] | null;
  tenants?:
    | {
        /**
         * Assign tenants to the user.
         */
        tenant: string | Tenant;
        /**
         * Assign roles specific to the tenant.
         */
        roles: ('tenant-admin' | 'tenant-viewer')[];
        id?: string | null;
      }[]
    | null;
  /**
   * Assign shops to the user.
   */
  shops?: (string | Shop)[] | null;
  /**
   * The username of the user.
   */
  username?: string | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "shops".
 */
export interface Shop {
  id: string;
  tenant: string | Tenant;
  domain: string;
  /**
   * The name of the shop.
   */
  name: string;
  slug?: string | null;
  /**
   * The address of the shop.
   */
  address?: string | null;
  location?: {
    lat?: string | null;
    lng?: string | null;
  };
  /**
   * The phone number of the shop.
   */
  phone?: string | null;
  /**
   * Details about the company associated with the shop.
   */
  company_details: {
    /**
     * The name of the company.
     */
    company_name: string;
    /**
     * The street of the company address.
     */
    street?: string | null;
    /**
     * The house number of the company address.
     */
    house_number?: string | null;
    /**
     * The city of the company address.
     */
    city?: string | null;
    /**
     * The postal code of the company address.
     */
    postal?: string | null;
    /**
     * The VAT number of the company.
     */
    vat_nr?: string | null;
    /**
     * The URL of the company website.
     */
    website_url?: string | null;
  };
  /**
   * List of dates when the shop is exceptionally closed.
   */
  exceptionally_closed_days?:
    | {
        /**
         * The date when the shop is closed.
         */
        date: string;
        /**
         * The reason for the closure.
         */
        reason?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payment-methods".
 */
export interface PaymentMethod {
  id: string;
  tenant: string | Tenant;
  shops: (string | Shop)[];
  /**
   * Select a payment provider.
   */
  provider: 'multisafepay' | 'cash_on_delivery';
  /**
   * Settings for MultiSafePay.
   */
  multisafepay_settings?: {
    /**
     * Enable test mode for MultiSafePay.
     */
    enable_test_mode?: boolean | null;
    /**
     * Live API Key for MultiSafePay.
     */
    live_api_key?: string | null;
    /**
     * Test API Key for MultiSafePay.
     */
    test_api_key?: string | null;
    /**
     * Select the payment methods to enable for MultiSafePay.
     */
    methods?: ('MSP_Bancontact' | 'MSP_Visa' | 'MSP_Mastercard' | 'MSP_iDeal')[] | null;
  };
  /**
   * Enable or disable this payment method.
   */
  enabled?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "fulfillment-methods".
 */
export interface FulfillmentMethod {
  id: string;
  tenant: string | Tenant;
  shops: (string | Shop)[];
  /**
   * Select the type of fulfillment method.
   */
  method_type: 'delivery' | 'takeaway' | 'dine_in';
  /**
   * Specify the base delivery fee, if applicable.
   */
  delivery_fee?: number | null;
  /**
   * Specify the minimum order amount for this fulfillment method.
   */
  minimum_order?: number | null;
  /**
   * Specify the extra cost per kilometer for delivery.
   */
  extra_cost_per_km?: number | null;
  /**
   * Enable or disable this fulfillment method.
   */
  enabled?: boolean | null;
  /**
   * Additional settings specific to this fulfillment method.
   */
  settings?: {
    /**
     * Specify the delivery radius in kilometers.
     */
    delivery_radius?: number | null;
    /**
     * Add specific instructions for this method.
     */
    pickup_instructions?: string | null;
    /**
     * Add specific instructions for this method for kiosk.
     */
    kiosk_pickup_instructions?: string | null;
    /**
     * If true, this method’s orders will block timeslots for other methods that also share slots.
     */
    shared_booked_slots?: boolean | null;
    /**
     * If true, email is mandatory at checkout for this method.
     */
    checkout_email_required?: boolean | null;
    /**
     * If true, phone is mandatory at checkout for this method.
     */
    checkout_phone_required?: boolean | null;
    /**
     * If true, last name is mandatory at checkout for this method.
     */
    checkout_lastname_required?: boolean | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "timeslots".
 */
export interface Timeslot {
  id: string;
  tenant: string | Tenant;
  shops: (string | Shop)[];
  /**
   * Fulfillment method associated with these day/time ranges.
   */
  method_id: string | FulfillmentMethod;
  /**
   * Define time ranges for each day of the week.
   */
  week?: {
    monday?:
      | {
          start_time: string;
          end_time: string;
          interval_minutes?: number | null;
          max_orders?: number | null;
          status?: boolean | null;
          id?: string | null;
        }[]
      | null;
    tuesday?:
      | {
          start_time: string;
          end_time: string;
          interval_minutes?: number | null;
          max_orders?: number | null;
          status?: boolean | null;
          id?: string | null;
        }[]
      | null;
    wednesday?:
      | {
          start_time: string;
          end_time: string;
          interval_minutes?: number | null;
          max_orders?: number | null;
          status?: boolean | null;
          id?: string | null;
        }[]
      | null;
    thursday?:
      | {
          start_time: string;
          end_time: string;
          interval_minutes?: number | null;
          max_orders?: number | null;
          status?: boolean | null;
          id?: string | null;
        }[]
      | null;
    friday?:
      | {
          start_time: string;
          end_time: string;
          interval_minutes?: number | null;
          max_orders?: number | null;
          status?: boolean | null;
          id?: string | null;
        }[]
      | null;
    saturday?:
      | {
          start_time: string;
          end_time: string;
          interval_minutes?: number | null;
          max_orders?: number | null;
          status?: boolean | null;
          id?: string | null;
        }[]
      | null;
    sunday?:
      | {
          start_time: string;
          end_time: string;
          interval_minutes?: number | null;
          max_orders?: number | null;
          status?: boolean | null;
          id?: string | null;
        }[]
      | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "shop-branding".
 */
export interface ShopBranding {
  id: string;
  tenant: string | Tenant;
  shops: (string | Shop)[];
  /**
   * Displayed kiosk site title.
   */
  siteTitle: string;
  /**
   * Large background image for the kiosk header.
   */
  siteHeaderImg?: (string | null) | Media;
  /**
   * Logo displayed in header or top corner (optional).
   */
  siteLogo?: (string | null) | Media;
  /**
   * Advertisement image for the order status page.
   */
  adImage?: (string | null) | Media;
  /**
   * Background color for the site header (if no image).
   */
  headerBackgroundColor?: string | null;
  /**
   * Background color for category cards in kiosk.
   */
  categoryCardBgColor?: string | null;
  /**
   * Used for “Add to Cart” / “Checkout” buttons, etc.
   */
  primaryColorCTA?: string | null;
  /**
   * Optional direct link for customers to leave a Google review.
   */
  googleReviewUrl?: string | null;
  /**
   * Optional direct link for customers to leave a TripAdvisor review.
   */
  tripAdvisorUrl?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  tenant: string | Tenant;
  /**
   * Optional tags to organize media files.
   */
  tags?:
    | {
        tag?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Blurhash representation of the image for quick previews.
   */
  blurhash?: string | null;
  /**
   * URL of the original image in S3.
   */
  s3_url?: string | null;
  /**
   * Alternative text for the media file to improve accessibility.
   */
  alt_text?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    medium?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reservation-entries".
 */
export interface ReservationEntry {
  id: string;
  tenant: string | Tenant;
  shops: (string | Shop)[];
  /**
   * Name of the customer making the reservation.
   */
  customer_name: string;
  /**
   * Phone number of the customer.
   */
  customer_phone: string;
  /**
   * Email address of the customer making the reservation.
   */
  customer_email: string;
  /**
   * Date of the reservation.
   */
  date: string;
  /**
   * Date of the reservation.
   */
  time: string;
  /**
   * Number of persons for the reservation.
   */
  persons: number;
  /**
   * Assigned table for the reservation.
   */
  table: string | Table;
  /**
   * Special requests from the customer.
   */
  special_requests?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tables".
 */
export interface Table {
  id: string;
  tenant: string | Tenant;
  shops: (string | Shop)[];
  /**
   * Unique table number within a shop.
   */
  table_num: number;
  /**
   * Current status of the table.
   */
  status?: ('0' | '1' | '2') | null;
  /**
   * Number of persons that can fit on this table.
   */
  capacity: number;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reservation-settings".
 */
export interface ReservationSetting {
  id: string;
  tenant: string | Tenant;
  shops: (string | Shop)[];
  /**
   * Name for reservation settings (e.g., Lunch Reservations).
   */
  reservation_name: string;
  /**
   * Define active days for reservations.
   */
  active_days?: {
    monday?: boolean | null;
    tuesday?: boolean | null;
    wednesday?: boolean | null;
    thursday?: boolean | null;
    friday?: boolean | null;
    saturday?: boolean | null;
    sunday?: boolean | null;
  };
  /**
   * Define multiple reservation periods.
   */
  reservation_periods?:
    | {
        start_date: string;
        end_date: string;
        start_time: string;
        end_time: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Define holidays when reservations are not allowed.
   */
  holidays?:
    | {
        start_date: string;
        end_date: string;
        /**
         * Optional reason for the holiday period.
         */
        reason?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * List of fully booked days.
   */
  fully_booked_days?:
    | {
        date: string;
        /**
         * Optional reason for marking the day as fully booked.
         */
        reason?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * List of exceptions when reservations are not allowed.
   */
  exceptions?:
    | {
        exception_date: string;
        /**
         * Reason for the exception (optional).
         */
        reason?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "printers".
 */
export interface Printer {
  id: string;
  tenant: string | Tenant;
  /**
   * Select the shop associated with this printer.
   */
  printername: string | Shop;
  /**
   * Settings for this shop printer.
   */
  printer_settings?: {
    /**
     * Default printer ID.
     */
    default_printer_id?: string | null;
    /**
     * Enable printing functionality.
     */
    print_enabled?: boolean | null;
    /**
     * Enable kitchen printing functionality.
     */
    kitchen_enabled?: boolean | null;
    /**
     * Enable customer printing functionality.
     */
    customer_enabled?: boolean | null;
    /**
     * Number of kitchen tickets to print.
     */
    kitchen_ticket_amount?: number | null;
    /**
     * Printer ID for the kitchen printer.
     */
    kitchen_printer_id?: string | null;
    /**
     * List of Kiosk printers (add multiple).
     */
    kiosk_printers?:
      | {
          /**
           * Kiosk ID.
           */
          kiosk_id?: string | null;
          /**
           * Kiosk PrintNode ID.
           */
          kiosk_printnode_id?: string | null;
          id?: string | null;
        }[]
      | null;
    /**
     * Enable printing of category headers.
     */
    print_category_headers?: boolean | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  /**
   * Title of the page.
   */
  title?: string | null;
  /**
   * Used for URL paths, e.g., /page-slug.
   */
  slug?: string | null;
  tenant: string | Tenant;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "customers".
 */
export interface Customer {
  id: string;
  tenant: string | Tenant;
  shops: (string | Shop)[];
  /**
   * First name of the customer.
   */
  firstname: string;
  /**
   * Last name of the customer.
   */
  lastname: string;
  /**
   * Company name associated with the customer (if applicable).
   */
  company_name?: string | null;
  /**
   * Email address of the customer.
   */
  email: string;
  /**
   * Phone number of the customer.
   */
  phone?: string | null;
  tags?:
    | {
        /**
         * Tag ID associated with the customer.
         */
        tag_id?: string | null;
        /**
         * Type of tag (e.g., loyalty, preference).
         */
        tag_type?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "customer-credits".
 */
export interface CustomerCredit {
  id: string;
  tenant: string | Tenant;
  shops: (string | Shop)[];
  /**
   * The customer this credit is assigned to.
   */
  customerid: string | Customer;
  /**
   * Credit value available for the customer.
   */
  value: number;
  /**
   * Optional tag identifier for this credit.
   */
  tagid?: string | null;
  /**
   * Optional tag type for this credit.
   */
  tagtype?: string | null;
  /**
   * Product associated with this credit (if applicable).
   */
  productid?: (string | null) | Product;
  /**
   * Category associated with this credit (if applicable).
   */
  categoryid?: (string | null) | Category;
  /**
   * Payment method associated with this credit.
   */
  paymenttype?: (string | null) | PaymentMethod;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "products".
 */
export interface Product {
  id: string;
  tenant: string | Tenant;
  shops: (string | Shop)[];
  categories: (string | Category)[];
  /**
   * Enter the product name in Dutch.
   */
  name_nl: string;
  /**
   * Enter the name in English.
   */
  name_en?: string | null;
  /**
   * Enter the name in German.
   */
  name_de?: string | null;
  /**
   * Enter the name in French.
   */
  name_fr?: string | null;
  /**
   * Select all allergens that apply to this product.
   */
  allergens?:
    | (
        | 'gluten'
        | 'eggs'
        | 'fish'
        | 'peanuts'
        | 'soybeans'
        | 'milk'
        | 'nuts'
        | 'celery'
        | 'mustard'
        | 'sesame'
        | 'sulphites'
        | 'lupin'
        | 'molluscs'
      )[]
    | null;
  /**
   * Use a unified sale price for all fulfillment methods.
   */
  price_unified?: boolean | null;
  /**
   * The unified sale price.
   */
  price?: number | null;
  /**
   * Sale price for dine-in.
   */
  price_dinein?: number | null;
  /**
   * Sale price for takeaway.
   */
  price_takeaway?: number | null;
  /**
   * Sale price for delivery.
   */
  price_delivery?: number | null;
  /**
   * Products with a lower menuOrder appear first. If two items share the same menuOrder, they’re sorted alphabetically by name.
   */
  menuOrder?: number | null;
  /**
   * Check if this product is on promotion. Old price field will appear.
   */
  isPromotion?: boolean | null;
  /**
   * Please put the old (original) price here, and use the normal price field for the new price.
   */
  old_price?: number | null;
  /**
   * Enable stock tracking for this product.
   */
  enable_stock?: boolean | null;
  /**
   * Specify the stock quantity for this product.
   */
  quantity?: number | null;
  /**
   * Specify the VAT percentage (e.g., 6, 12, 21).
   */
  tax: number;
  /**
   * Specify the VAT percentage (e.g., 6, 12, 21).
   */
  tax_dinein?: number | null;
  /**
   * Enable product visibility in the POS system.
   */
  posshow?: boolean | null;
  /**
   * Product barcode (if applicable).
   */
  barcode?: string | null;
  /**
   * Reference an image from the Media library.
   */
  image?: (string | null) | Media;
  /**
   * Timestamp for last modification.
   */
  modtime: number;
  /**
   * Enter the default description in Dutch.
   */
  description_nl: string;
  /**
   * Enter the description in English.
   */
  description_en?: string | null;
  /**
   * Enter the description in German.
   */
  description_de?: string | null;
  /**
   * Enter the description in French.
   */
  description_fr?: string | null;
  /**
   * Show this product in the webshop.
   */
  webshopshow?: boolean | null;
  /**
   * Allow this product to be ordered via the webshop.
   */
  webshoporderable?: boolean | null;
  /**
   * Product status (enabled or disabled).
   */
  status: 'enabled' | 'disabled';
  /**
   * Enable this to prevent category-specific popups from applying to this product.
   */
  exclude_category_popups?: boolean | null;
  /**
   * Assign popups to this product and define their order.
   */
  productpopups?:
    | {
        /**
         * Select a popup to assign to this product.
         */
        popup: string | Productpopup;
        /**
         * Order in which this popup appears in the product workflow.
         */
        order: number;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: string;
  tenant: string | Tenant;
  shops: (string | Shop)[];
  /**
   * Enter the category name in Dutch (default).
   */
  name_nl: string;
  /**
   * Enter the category name in English.
   */
  name_en?: string | null;
  /**
   * Enter the category name in German.
   */
  name_de?: string | null;
  /**
   * Enter the category name in French.
   */
  name_fr?: string | null;
  /**
   * Determines the front-end order of categories (lowest first).
   */
  menuOrder?: number | null;
  /**
   * Reference an image from the Media library.
   */
  image?: (string | null) | Media;
  /**
   * Timestamp for last modification
   */
  modtime: number;
  /**
   * Category status (enabled or disabled)
   */
  status: 'enabled' | 'disabled';
  /**
   * Assign product popups to this category. These popups will apply to all products in the category.
   */
  productpopups?:
    | {
        popup: string | Productpopup;
        /**
         * The order in which this popup will appear.
         */
        order?: number | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "productpopups".
 */
export interface Productpopup {
  id: string;
  tenant: string | Tenant;
  shops: (string | Shop)[];
  /**
   * Enter the popup title in Dutch (default).
   */
  popup_title_nl: string;
  /**
   * Enter the popup title in English.
   */
  popup_title_en?: string | null;
  /**
   * Enter the popup title in German.
   */
  popup_title_de?: string | null;
  /**
   * Enter the popup title in French.
   */
  popup_title_fr?: string | null;
  /**
   * Allow selecting multiple options in this popup.
   */
  multiselect?: boolean | null;
  /**
   * Require selection of an option in the cash register.
   */
  required_option_cashregister?: boolean | null;
  /**
   * Require selection of an option in the webshop.
   */
  required_option_webshop?: boolean | null;
  /**
   * Minimum number of options to select.
   */
  minimum_option?: number | null;
  /**
   * Maximum number of options to select. Set to 0 for no limit.
   */
  maximum_option?: number | null;
  /**
   * Default subproduct selected when the popup loads.
   */
  default_checked_subproduct?: (string | null) | Subproduct;
  /**
   * List of subproducts associated with this popup.
   */
  subproducts?: (string | Subproduct)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "subproducts".
 */
export interface Subproduct {
  id: string;
  tenant: string | Tenant;
  shops: (string | Shop)[];
  /**
   * Enter the subproduct name in Dutch.
   */
  name_nl: string;
  /**
   * Enter the subproduct name in English.
   */
  name_en?: string | null;
  /**
   * Enter the subproduct name in German.
   */
  name_de?: string | null;
  /**
   * Enter the subproduct name in French.
   */
  name_fr?: string | null;
  /**
   * Use a unified sale price for all fulfillment methods.
   */
  price_unified?: boolean | null;
  /**
   * The unified sale price.
   */
  price?: number | null;
  /**
   * Sale price for dine-in.
   */
  price_dinein?: number | null;
  /**
   * Sale price for takeaway.
   */
  price_takeaway?: number | null;
  /**
   * Sale price for delivery.
   */
  price_delivery?: number | null;
  /**
   * Enable linking to an existing product. If enabled, price and tax fields will be hidden.
   */
  linked_product_enabled?: boolean | null;
  /**
   * Select a product to link with this subproduct.
   */
  linked_product?: (string | null) | Product;
  /**
   * Enable stock tracking for this subproduct.
   */
  stock_enabled?: boolean | null;
  /**
   * Stock quantity
   */
  stock_quantity?: number | null;
  /**
   * Specify the VAT percentage (e.g., 6, 12, 21).
   */
  tax?: number | null;
  /**
   * Specify the VAT percentage (e.g., 6, 12, 21).
   */
  tax_table?: number | null;
  /**
   * Reference an image from the Media library.
   */
  image?: (string | null) | Media;
  /**
   * Timestamp for last modification.
   */
  modtime: number;
  /**
   * Mark this subproduct as deleted
   */
  deleted?: boolean | null;
  /**
   * Subproduct status (enabled or disabled).
   */
  status: 'enabled' | 'disabled';
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "customer-loyalty".
 */
export interface CustomerLoyalty {
  id: string;
  tenant: string | Tenant;
  shops: (string | Shop)[];
  /**
   * Name of the loyalty program, e.g., "VIP Rewards".
   */
  program_name: string;
  /**
   * Number of points awarded per purchase.
   */
  points_per_purchase: number;
  /**
   * Conversion ratio for points to currency, e.g., 100 points = $1.
   */
  redeem_ratio: number;
  /**
   * Status of the loyalty program.
   */
  status: 'active' | 'inactive';
  /**
   * Additional details about the loyalty program.
   */
  description?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "coupons".
 */
export interface Coupon {
  id: string;
  tenant: string | Tenant;
  shops: (string | Shop)[];
  /**
   * Unique barcode for the coupon.
   */
  barcode: string;
  /**
   * Value of the coupon (percentage or fixed amount).
   */
  value: number;
  /**
   * Type of value for the coupon.
   */
  value_type: 'percentage' | 'fixed';
  /**
   * Start date for the coupon validity.
   */
  valid_from: string;
  /**
   * End date for the coupon validity.
   */
  valid_until: string;
  /**
   * Maximum number of times the coupon can be used. Leave empty for unlimited.
   */
  max_uses?: number | null;
  /**
   * Number of times this coupon has been used.
   */
  uses?: number | null;
  /**
   * Mark if the coupon has already been fully used.
   */
  used?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "gift-vouchers".
 */
export interface GiftVoucher {
  id: string;
  tenant: string | Tenant;
  shops: (string | Shop)[];
  /**
   * Unique barcode for the gift voucher.
   */
  barcode: string;
  /**
   * Value of the gift voucher.
   */
  value: number;
  /**
   * Start date for the gift voucher validity.
   */
  valid_from: string;
  /**
   * End date for the gift voucher validity.
   */
  valid_until: string;
  /**
   * Mark if the gift voucher has been used.
   */
  used?: boolean | null;
  /**
   * The payment method used to purchase this voucher.
   */
  payment_type: string | PaymentMethod;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "orders".
 */
export interface Order {
  tenant: string | Tenant;
  shops: (string | Shop)[];
  /**
   * Auto-incrementing identifier for the order.
   */
  id: number;
  /**
   * Temporary order number for daily usage.
   */
  tempOrdNr?: number | null;
  /**
   * Current status of the order.
   */
  status:
    | 'pending_payment'
    | 'awaiting_preparation'
    | 'in_preparation'
    | 'ready_for_pickup'
    | 'in_delivery'
    | 'complete'
    | 'cancelled';
  /**
   * Type of order (POS, Web, or Kiosk).
   */
  order_type: 'pos' | 'web' | 'kiosk';
  /**
   * List of products in the order (line items).
   */
  order_details?:
    | {
        product: string | Product;
        quantity: number;
        price: number;
        tax?: number | null;
        tax_dinein?: number | null;
        name_nl?: string | null;
        name_en?: string | null;
        name_de?: string | null;
        name_fr?: string | null;
        subproducts?:
          | {
              /**
               * An ID or code for this subproduct if needed (no relationship).
               */
              subproductId?: string | null;
              name_nl?: string | null;
              name_en?: string | null;
              name_de?: string | null;
              name_fr?: string | null;
              price: number;
              tax?: number | null;
              tax_dinein?: number | null;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Payment details for the order.
   */
  payments?:
    | {
        payment_method: string | PaymentMethod;
        sub_method_label?: string | null;
        amount?: number | null;
        id?: string | null;
      }[]
    | null;
  fulfillment_method?: ('delivery' | 'takeaway' | 'dine_in') | null;
  fulfillment_date?: string | null;
  fulfillment_time?: string | null;
  customer_details?: {
    firstName?: string | null;
    lastName?: string | null;
    email?: string | null;
    phone?: string | null;
    address?: string | null;
    city?: string | null;
    postalCode?: string | null;
  };
  /**
   * Delivery/shipping fee (if any).
   */
  shipping_cost?: number | null;
  subtotal?: number | null;
  total_tax?: number | null;
  total?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'tenants';
        value: string | Tenant;
      } | null)
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'shops';
        value: string | Shop;
      } | null)
    | ({
        relationTo: 'payment-methods';
        value: string | PaymentMethod;
      } | null)
    | ({
        relationTo: 'fulfillment-methods';
        value: string | FulfillmentMethod;
      } | null)
    | ({
        relationTo: 'timeslots';
        value: string | Timeslot;
      } | null)
    | ({
        relationTo: 'shop-branding';
        value: string | ShopBranding;
      } | null)
    | ({
        relationTo: 'reservation-entries';
        value: string | ReservationEntry;
      } | null)
    | ({
        relationTo: 'reservation-settings';
        value: string | ReservationSetting;
      } | null)
    | ({
        relationTo: 'tables';
        value: string | Table;
      } | null)
    | ({
        relationTo: 'printers';
        value: string | Printer;
      } | null)
    | ({
        relationTo: 'pages';
        value: string | Page;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'customers';
        value: string | Customer;
      } | null)
    | ({
        relationTo: 'customer-credits';
        value: string | CustomerCredit;
      } | null)
    | ({
        relationTo: 'customer-loyalty';
        value: string | CustomerLoyalty;
      } | null)
    | ({
        relationTo: 'coupons';
        value: string | Coupon;
      } | null)
    | ({
        relationTo: 'gift-vouchers';
        value: string | GiftVoucher;
      } | null)
    | ({
        relationTo: 'orders';
        value: number | Order;
      } | null)
    | ({
        relationTo: 'categories';
        value: string | Category;
      } | null)
    | ({
        relationTo: 'products';
        value: string | Product;
      } | null)
    | ({
        relationTo: 'subproducts';
        value: string | Subproduct;
      } | null)
    | ({
        relationTo: 'productpopups';
        value: string | Productpopup;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tenants_select".
 */
export interface TenantsSelect<T extends boolean = true> {
  name?: T;
  domains?:
    | T
    | {
        domain?: T;
        id?: T;
      };
  slug?: T;
  public?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  roles?: T;
  tenants?:
    | T
    | {
        tenant?: T;
        roles?: T;
        id?: T;
      };
  shops?: T;
  username?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "shops_select".
 */
export interface ShopsSelect<T extends boolean = true> {
  tenant?: T;
  domain?: T;
  name?: T;
  slug?: T;
  address?: T;
  location?:
    | T
    | {
        lat?: T;
        lng?: T;
      };
  phone?: T;
  company_details?:
    | T
    | {
        company_name?: T;
        street?: T;
        house_number?: T;
        city?: T;
        postal?: T;
        vat_nr?: T;
        website_url?: T;
      };
  exceptionally_closed_days?:
    | T
    | {
        date?: T;
        reason?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payment-methods_select".
 */
export interface PaymentMethodsSelect<T extends boolean = true> {
  tenant?: T;
  shops?: T;
  provider?: T;
  multisafepay_settings?:
    | T
    | {
        enable_test_mode?: T;
        live_api_key?: T;
        test_api_key?: T;
        methods?: T;
      };
  enabled?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "fulfillment-methods_select".
 */
export interface FulfillmentMethodsSelect<T extends boolean = true> {
  tenant?: T;
  shops?: T;
  method_type?: T;
  delivery_fee?: T;
  minimum_order?: T;
  extra_cost_per_km?: T;
  enabled?: T;
  settings?:
    | T
    | {
        delivery_radius?: T;
        pickup_instructions?: T;
        kiosk_pickup_instructions?: T;
        shared_booked_slots?: T;
        checkout_email_required?: T;
        checkout_phone_required?: T;
        checkout_lastname_required?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "timeslots_select".
 */
export interface TimeslotsSelect<T extends boolean = true> {
  tenant?: T;
  shops?: T;
  method_id?: T;
  week?:
    | T
    | {
        monday?:
          | T
          | {
              start_time?: T;
              end_time?: T;
              interval_minutes?: T;
              max_orders?: T;
              status?: T;
              id?: T;
            };
        tuesday?:
          | T
          | {
              start_time?: T;
              end_time?: T;
              interval_minutes?: T;
              max_orders?: T;
              status?: T;
              id?: T;
            };
        wednesday?:
          | T
          | {
              start_time?: T;
              end_time?: T;
              interval_minutes?: T;
              max_orders?: T;
              status?: T;
              id?: T;
            };
        thursday?:
          | T
          | {
              start_time?: T;
              end_time?: T;
              interval_minutes?: T;
              max_orders?: T;
              status?: T;
              id?: T;
            };
        friday?:
          | T
          | {
              start_time?: T;
              end_time?: T;
              interval_minutes?: T;
              max_orders?: T;
              status?: T;
              id?: T;
            };
        saturday?:
          | T
          | {
              start_time?: T;
              end_time?: T;
              interval_minutes?: T;
              max_orders?: T;
              status?: T;
              id?: T;
            };
        sunday?:
          | T
          | {
              start_time?: T;
              end_time?: T;
              interval_minutes?: T;
              max_orders?: T;
              status?: T;
              id?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "shop-branding_select".
 */
export interface ShopBrandingSelect<T extends boolean = true> {
  tenant?: T;
  shops?: T;
  siteTitle?: T;
  siteHeaderImg?: T;
  siteLogo?: T;
  adImage?: T;
  headerBackgroundColor?: T;
  categoryCardBgColor?: T;
  primaryColorCTA?: T;
  googleReviewUrl?: T;
  tripAdvisorUrl?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reservation-entries_select".
 */
export interface ReservationEntriesSelect<T extends boolean = true> {
  tenant?: T;
  shops?: T;
  customer_name?: T;
  customer_phone?: T;
  customer_email?: T;
  date?: T;
  time?: T;
  persons?: T;
  table?: T;
  special_requests?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reservation-settings_select".
 */
export interface ReservationSettingsSelect<T extends boolean = true> {
  tenant?: T;
  shops?: T;
  reservation_name?: T;
  active_days?:
    | T
    | {
        monday?: T;
        tuesday?: T;
        wednesday?: T;
        thursday?: T;
        friday?: T;
        saturday?: T;
        sunday?: T;
      };
  reservation_periods?:
    | T
    | {
        start_date?: T;
        end_date?: T;
        start_time?: T;
        end_time?: T;
        id?: T;
      };
  holidays?:
    | T
    | {
        start_date?: T;
        end_date?: T;
        reason?: T;
        id?: T;
      };
  fully_booked_days?:
    | T
    | {
        date?: T;
        reason?: T;
        id?: T;
      };
  exceptions?:
    | T
    | {
        exception_date?: T;
        reason?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tables_select".
 */
export interface TablesSelect<T extends boolean = true> {
  tenant?: T;
  shops?: T;
  table_num?: T;
  status?: T;
  capacity?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "printers_select".
 */
export interface PrintersSelect<T extends boolean = true> {
  tenant?: T;
  printername?: T;
  printer_settings?:
    | T
    | {
        default_printer_id?: T;
        print_enabled?: T;
        kitchen_enabled?: T;
        customer_enabled?: T;
        kitchen_ticket_amount?: T;
        kitchen_printer_id?: T;
        kiosk_printers?:
          | T
          | {
              kiosk_id?: T;
              kiosk_printnode_id?: T;
              id?: T;
            };
        print_category_headers?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  tenant?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  tenant?: T;
  tags?:
    | T
    | {
        tag?: T;
        id?: T;
      };
  blurhash?: T;
  s3_url?: T;
  alt_text?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        medium?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "customers_select".
 */
export interface CustomersSelect<T extends boolean = true> {
  tenant?: T;
  shops?: T;
  firstname?: T;
  lastname?: T;
  company_name?: T;
  email?: T;
  phone?: T;
  tags?:
    | T
    | {
        tag_id?: T;
        tag_type?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "customer-credits_select".
 */
export interface CustomerCreditsSelect<T extends boolean = true> {
  tenant?: T;
  shops?: T;
  customerid?: T;
  value?: T;
  tagid?: T;
  tagtype?: T;
  productid?: T;
  categoryid?: T;
  paymenttype?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "customer-loyalty_select".
 */
export interface CustomerLoyaltySelect<T extends boolean = true> {
  tenant?: T;
  shops?: T;
  program_name?: T;
  points_per_purchase?: T;
  redeem_ratio?: T;
  status?: T;
  description?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "coupons_select".
 */
export interface CouponsSelect<T extends boolean = true> {
  tenant?: T;
  shops?: T;
  barcode?: T;
  value?: T;
  value_type?: T;
  valid_from?: T;
  valid_until?: T;
  max_uses?: T;
  uses?: T;
  used?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "gift-vouchers_select".
 */
export interface GiftVouchersSelect<T extends boolean = true> {
  tenant?: T;
  shops?: T;
  barcode?: T;
  value?: T;
  valid_from?: T;
  valid_until?: T;
  used?: T;
  payment_type?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "orders_select".
 */
export interface OrdersSelect<T extends boolean = true> {
  tenant?: T;
  shops?: T;
  id?: T;
  tempOrdNr?: T;
  status?: T;
  order_type?: T;
  order_details?:
    | T
    | {
        product?: T;
        quantity?: T;
        price?: T;
        tax?: T;
        tax_dinein?: T;
        name_nl?: T;
        name_en?: T;
        name_de?: T;
        name_fr?: T;
        subproducts?:
          | T
          | {
              subproductId?: T;
              name_nl?: T;
              name_en?: T;
              name_de?: T;
              name_fr?: T;
              price?: T;
              tax?: T;
              tax_dinein?: T;
              id?: T;
            };
        id?: T;
      };
  payments?:
    | T
    | {
        payment_method?: T;
        sub_method_label?: T;
        amount?: T;
        id?: T;
      };
  fulfillment_method?: T;
  fulfillment_date?: T;
  fulfillment_time?: T;
  customer_details?:
    | T
    | {
        firstName?: T;
        lastName?: T;
        email?: T;
        phone?: T;
        address?: T;
        city?: T;
        postalCode?: T;
      };
  shipping_cost?: T;
  subtotal?: T;
  total_tax?: T;
  total?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
  tenant?: T;
  shops?: T;
  name_nl?: T;
  name_en?: T;
  name_de?: T;
  name_fr?: T;
  menuOrder?: T;
  image?: T;
  modtime?: T;
  status?: T;
  productpopups?:
    | T
    | {
        popup?: T;
        order?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "products_select".
 */
export interface ProductsSelect<T extends boolean = true> {
  tenant?: T;
  shops?: T;
  categories?: T;
  name_nl?: T;
  name_en?: T;
  name_de?: T;
  name_fr?: T;
  allergens?: T;
  price_unified?: T;
  price?: T;
  price_dinein?: T;
  price_takeaway?: T;
  price_delivery?: T;
  menuOrder?: T;
  isPromotion?: T;
  old_price?: T;
  enable_stock?: T;
  quantity?: T;
  tax?: T;
  tax_dinein?: T;
  posshow?: T;
  barcode?: T;
  image?: T;
  modtime?: T;
  description_nl?: T;
  description_en?: T;
  description_de?: T;
  description_fr?: T;
  webshopshow?: T;
  webshoporderable?: T;
  status?: T;
  exclude_category_popups?: T;
  productpopups?:
    | T
    | {
        popup?: T;
        order?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "subproducts_select".
 */
export interface SubproductsSelect<T extends boolean = true> {
  tenant?: T;
  shops?: T;
  name_nl?: T;
  name_en?: T;
  name_de?: T;
  name_fr?: T;
  price_unified?: T;
  price?: T;
  price_dinein?: T;
  price_takeaway?: T;
  price_delivery?: T;
  linked_product_enabled?: T;
  linked_product?: T;
  stock_enabled?: T;
  stock_quantity?: T;
  tax?: T;
  tax_table?: T;
  image?: T;
  modtime?: T;
  deleted?: T;
  status?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "productpopups_select".
 */
export interface ProductpopupsSelect<T extends boolean = true> {
  tenant?: T;
  shops?: T;
  popup_title_nl?: T;
  popup_title_en?: T;
  popup_title_de?: T;
  popup_title_fr?: T;
  multiselect?: T;
  required_option_cashregister?: T;
  required_option_webshop?: T;
  minimum_option?: T;
  maximum_option?: T;
  default_checked_subproduct?: T;
  subproducts?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}