/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  collections: {
    tenants: Tenant;
    users: User;
    shops: Shop;
    pages: Page;
    categories: Category;
    products: Product;
    subproducts: Subproduct;
    productpopups: Productpopup;
    'payment-methods': PaymentMethod;
    tables: Table;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    tenants: TenantsSelect<false> | TenantsSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    shops: ShopsSelect<false> | ShopsSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    categories: CategoriesSelect<false> | CategoriesSelect<true>;
    products: ProductsSelect<false> | ProductsSelect<true>;
    subproducts: SubproductsSelect<false> | SubproductsSelect<true>;
    productpopups: ProductpopupsSelect<false> | ProductpopupsSelect<true>;
    'payment-methods': PaymentMethodsSelect<false> | PaymentMethodsSelect<true>;
    tables: TablesSelect<false> | TablesSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tenants".
 */
export interface Tenant {
  id: string;
  name: string;
  domains?:
    | {
        domain: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Used for url paths, example: /tenant-slug/page-slug
   */
  slug: string;
  /**
   * If checked, logging in is not required.
   */
  public?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  roles?: ('super-admin' | 'user')[] | null;
  tenants?:
    | {
        tenant: string | Tenant;
        roles: ('tenant-admin' | 'tenant-viewer')[];
        id?: string | null;
      }[]
    | null;
  /**
   * Assign shops to the user
   */
  shops?: (string | Shop)[] | null;
  username?: string | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "shops".
 */
export interface Shop {
  id: string;
  tenant: string | Tenant;
  name: string;
  address?: string | null;
  phone?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  title?: string | null;
  slug?: string | null;
  tenant: string | Tenant;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: string;
  tenant: string | Tenant;
  shops: (string | Shop)[];
  name: string;
  /**
   * URL for the category image
   */
  image_url?: string | null;
  /**
   * Timestamp for last modification
   */
  modtime: number;
  /**
   * Category status (enabled or disabled)
   */
  status: 'enabled' | 'disabled';
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "products".
 */
export interface Product {
  id: string;
  tenant: string | Tenant;
  shops: (string | Shop)[];
  categories: (string | Category)[];
  name: string;
  /**
   * Use a unified sale price for all fulfillment methods.
   */
  price_unified?: boolean | null;
  /**
   * Unified sale price
   */
  price?: number | null;
  /**
   * Sale price for dine-in
   */
  price_dinein?: number | null;
  /**
   * Sale price for takeaway
   */
  price_takeaway?: number | null;
  /**
   * Sale price for delivery
   */
  price_delivery?: number | null;
  /**
   * Enable stock tracking for this product
   */
  enable_stock?: boolean | null;
  /**
   * Stock quantity
   */
  quantity?: number | null;
  /**
   * Specify the VAT percentage (e.g., 6, 12, 21)
   */
  tax: number;
  /**
   * Numeric identifier for the applicable tax table
   */
  tax_dinein?: number | null;
  /**
   * Enable product visibility in the POS system
   */
  posshow?: boolean | null;
  /**
   * Product barcode (if applicable)
   */
  barcode?: string | null;
  /**
   * URL for the product image
   */
  image_url?: string | null;
  /**
   * Timestamp for last modification
   */
  modtime: number;
  /**
   * Webshop description for the product
   */
  webdescription?: string | null;
  /**
   * Show this product in the webshop
   */
  webshopshow?: boolean | null;
  /**
   * Allow this product to be ordered via the webshop
   */
  webshoporderable?: boolean | null;
  /**
   * Product status (enabled or disabled)
   */
  status: 'enabled' | 'disabled';
  /**
   * Assign popups to this product and define their order.
   */
  productpopups?:
    | {
        /**
         * Select a popup to assign to this product.
         */
        popup: string | Productpopup;
        /**
         * Order in which this popup appears in the product workflow.
         */
        order: number;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "productpopups".
 */
export interface Productpopup {
  id: string;
  tenant: string | Tenant;
  shops: (string | Shop)[];
  /**
   * Title of the popup, e.g., "Choose Your Sauce"
   */
  popup_title: string;
  /**
   * Optional: Associate this popup with a specific product.
   */
  product?: (string | null) | Product;
  /**
   * Allow selecting multiple options in this popup.
   */
  multiselect?: boolean | null;
  /**
   * Require selection of an option in the cash register.
   */
  required_option_cashregister?: boolean | null;
  /**
   * Require selection of an option in the webshop.
   */
  required_option_webshop?: boolean | null;
  /**
   * Minimum number of options to select.
   */
  minimum_option?: number | null;
  /**
   * Maximum number of options to select. Set to 0 for no limit.
   */
  maximum_option?: number | null;
  /**
   * Default subproduct selected when the popup loads.
   */
  default_checked_subproduct?: (string | null) | Subproduct;
  /**
   * List of subproducts associated with this popup.
   */
  subproducts?: (string | Subproduct)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "subproducts".
 */
export interface Subproduct {
  id: string;
  tenant: string | Tenant;
  shops: (string | Shop)[];
  name: string;
  /**
   * Use a unified sale price for all fulfillment methods.
   */
  price_unified?: boolean | null;
  /**
   * Unified sale price
   */
  price?: number | null;
  /**
   * Sale price for dine-in
   */
  price_dinein?: number | null;
  /**
   * Sale price for takeaway
   */
  price_takeaway?: number | null;
  /**
   * Sale price for delivery
   */
  price_delivery?: number | null;
  /**
   * Enable linking to an existing product. If enabled, price and tax fields will be hidden.
   */
  linked_product_enabled?: boolean | null;
  linked_product?: (string | null) | Product;
  /**
   * Enable stock tracking for this subproduct
   */
  stock_enabled?: boolean | null;
  /**
   * Stock quantity
   */
  stock_quantity?: number | null;
  /**
   * Specify the VAT percentage (e.g., 6, 12, 21)
   */
  tax?: number | null;
  /**
   * Specify the VAT percentage for dinein (e.g., 6, 12, 21)
   */
  tax_table?: number | null;
  /**
   * URL for the subproduct image
   */
  image_url?: string | null;
  /**
   * Timestamp for last modification
   */
  modtime: number;
  /**
   * Mark this subproduct as deleted
   */
  deleted?: boolean | null;
  /**
   * Subproduct status (enabled or disabled)
   */
  status: 'enabled' | 'disabled';
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payment-methods".
 */
export interface PaymentMethod {
  id: string;
  tenant: string | Tenant;
  shops: (string | Shop)[];
  /**
   * Select a payment provider.
   */
  provider: 'multisafepay' | 'cash_on_delivery';
  /**
   * Settings for MultiSafePay.
   */
  multisafepay_settings?: {
    /**
     * Enable test mode for MultiSafePay.
     */
    enable_test_mode?: boolean | null;
    /**
     * Live API Key for MultiSafePay.
     */
    live_api_key?: string | null;
    /**
     * Test API Key for MultiSafePay.
     */
    test_api_key?: string | null;
    /**
     * Select the payment methods to enable for MultiSafePay.
     */
    methods?: ('MSP_Bancontact' | 'MSP_Visa' | 'MSP_Mastercard' | 'MSP_iDeal')[] | null;
  };
  /**
   * Enable or disable this payment method.
   */
  enabled?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tables".
 */
export interface Table {
  id: string;
  tenant: string | Tenant;
  shops: (string | Shop)[];
  /**
   * Unique table number within a shop.
   */
  table_num: number;
  /**
   * Current status of the table.
   */
  status?: ('0' | '1' | '2') | null;
  /**
   * Number of persons that can fit on this table.
   */
  capacity: number;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'tenants';
        value: string | Tenant;
      } | null)
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'shops';
        value: string | Shop;
      } | null)
    | ({
        relationTo: 'pages';
        value: string | Page;
      } | null)
    | ({
        relationTo: 'categories';
        value: string | Category;
      } | null)
    | ({
        relationTo: 'products';
        value: string | Product;
      } | null)
    | ({
        relationTo: 'subproducts';
        value: string | Subproduct;
      } | null)
    | ({
        relationTo: 'productpopups';
        value: string | Productpopup;
      } | null)
    | ({
        relationTo: 'payment-methods';
        value: string | PaymentMethod;
      } | null)
    | ({
        relationTo: 'tables';
        value: string | Table;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tenants_select".
 */
export interface TenantsSelect<T extends boolean = true> {
  name?: T;
  domains?:
    | T
    | {
        domain?: T;
        id?: T;
      };
  slug?: T;
  public?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  roles?: T;
  tenants?:
    | T
    | {
        tenant?: T;
        roles?: T;
        id?: T;
      };
  shops?: T;
  username?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "shops_select".
 */
export interface ShopsSelect<T extends boolean = true> {
  tenant?: T;
  name?: T;
  address?: T;
  phone?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  tenant?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
  tenant?: T;
  shops?: T;
  name?: T;
  image_url?: T;
  modtime?: T;
  status?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "products_select".
 */
export interface ProductsSelect<T extends boolean = true> {
  tenant?: T;
  shops?: T;
  categories?: T;
  name?: T;
  price_unified?: T;
  price?: T;
  price_dinein?: T;
  price_takeaway?: T;
  price_delivery?: T;
  enable_stock?: T;
  quantity?: T;
  tax?: T;
  tax_dinein?: T;
  posshow?: T;
  barcode?: T;
  image_url?: T;
  modtime?: T;
  webdescription?: T;
  webshopshow?: T;
  webshoporderable?: T;
  status?: T;
  productpopups?:
    | T
    | {
        popup?: T;
        order?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "subproducts_select".
 */
export interface SubproductsSelect<T extends boolean = true> {
  tenant?: T;
  shops?: T;
  name?: T;
  price_unified?: T;
  price?: T;
  price_dinein?: T;
  price_takeaway?: T;
  price_delivery?: T;
  linked_product_enabled?: T;
  linked_product?: T;
  stock_enabled?: T;
  stock_quantity?: T;
  tax?: T;
  tax_table?: T;
  image_url?: T;
  modtime?: T;
  deleted?: T;
  status?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "productpopups_select".
 */
export interface ProductpopupsSelect<T extends boolean = true> {
  tenant?: T;
  shops?: T;
  popup_title?: T;
  product?: T;
  multiselect?: T;
  required_option_cashregister?: T;
  required_option_webshop?: T;
  minimum_option?: T;
  maximum_option?: T;
  default_checked_subproduct?: T;
  subproducts?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payment-methods_select".
 */
export interface PaymentMethodsSelect<T extends boolean = true> {
  tenant?: T;
  shops?: T;
  provider?: T;
  multisafepay_settings?:
    | T
    | {
        enable_test_mode?: T;
        live_api_key?: T;
        test_api_key?: T;
        methods?: T;
      };
  enabled?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tables_select".
 */
export interface TablesSelect<T extends boolean = true> {
  tenant?: T;
  shops?: T;
  table_num?: T;
  status?: T;
  capacity?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}